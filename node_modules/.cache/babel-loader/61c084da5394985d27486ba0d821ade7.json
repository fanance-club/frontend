{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/raghu/Fanance/fanance-dapp/app/frontend/src/Sample.js\";\nimport React, { Component } from \"react\";\n\nclass Sample extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      counter: null\n    };\n  }\n\n  componentDidMount() {\n    const {\n      store\n    } = this.props;\n    const contract = this.props.accounts[0];\n    console.log(contract); // let drizzle know we want to watch the `myString` method\n\n    const counter = contract[\"owner\"].cacheCall(); // save the `dataKey` to local component state for later reference\n\n    this.setState({\n      counter\n    });\n  }\n\n  render() {\n    // get the contract state from drizzleState\n    console.log(this.props);\n    const {\n      TokenGenerator\n    } = this.props; // using the saved `dataKey`, get the variable we're interested in\n\n    const myString = TokenGenerator.counter[this.state.counter]; // if it exists, then we display its value\n\n    return /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"My stored string: \", myString && myString.value]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 10\n    }, this);\n  }\n\n}\n\nexport default Sample;","map":{"version":3,"sources":["/Users/raghu/Fanance/fanance-dapp/app/frontend/src/Sample.js"],"names":["React","Component","Sample","state","counter","componentDidMount","store","props","contract","accounts","console","log","cacheCall","setState","render","TokenGenerator","myString","value"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;;AAEA,MAAMC,MAAN,SAAqBD,SAArB,CAA+B;AAAA;AAAA;AAAA,SAC9BE,KAD8B,GACtB;AAAEC,MAAAA,OAAO,EAAE;AAAX,KADsB;AAAA;;AAG9BC,EAAAA,iBAAiB,GAAG;AACnB,UAAM;AAAEC,MAAAA;AAAF,QAAY,KAAKC,KAAvB;AACA,UAAMC,QAAQ,GAAG,KAAKD,KAAL,CAAWE,QAAX,CAAoB,CAApB,CAAjB;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAYH,QAAZ,EAHmB,CAKnB;;AACA,UAAMJ,OAAO,GAAGI,QAAQ,CAAC,OAAD,CAAR,CAAkBI,SAAlB,EAAhB,CANmB,CAQnB;;AACA,SAAKC,QAAL,CAAc;AAAET,MAAAA;AAAF,KAAd;AACA;;AAEDU,EAAAA,MAAM,GAAG;AACR;AACAJ,IAAAA,OAAO,CAACC,GAAR,CAAY,KAAKJ,KAAjB;AACA,UAAM;AAAEQ,MAAAA;AAAF,QAAqB,KAAKR,KAAhC,CAHQ,CAKR;;AACA,UAAMS,QAAQ,GAAGD,cAAc,CAACX,OAAf,CAAuB,KAAKD,KAAL,CAAWC,OAAlC,CAAjB,CANQ,CAQR;;AACA,wBAAO;AAAA,uCAAsBY,QAAQ,IAAIA,QAAQ,CAACC,KAA3C;AAAA;AAAA;AAAA;AAAA;AAAA,YAAP;AACA;;AAzB6B;;AA4B/B,eAAef,MAAf","sourcesContent":["import React, { Component } from \"react\";\n\nclass Sample extends Component {\n\tstate = { counter: null };\n\n\tcomponentDidMount() {\n\t\tconst { store } = this.props;\n\t\tconst contract = this.props.accounts[0];\n\t\tconsole.log(contract);\n\n\t\t// let drizzle know we want to watch the `myString` method\n\t\tconst counter = contract[\"owner\"].cacheCall();\n\n\t\t// save the `dataKey` to local component state for later reference\n\t\tthis.setState({ counter });\n\t}\n\n\trender() {\n\t\t// get the contract state from drizzleState\n\t\tconsole.log(this.props);\n\t\tconst { TokenGenerator } = this.props;\n\n\t\t// using the saved `dataKey`, get the variable we're interested in\n\t\tconst myString = TokenGenerator.counter[this.state.counter];\n\n\t\t// if it exists, then we display its value\n\t\treturn <p>My stored string: {myString && myString.value}</p>;\n\t}\n}\n\nexport default Sample;\n"]},"metadata":{},"sourceType":"module"}