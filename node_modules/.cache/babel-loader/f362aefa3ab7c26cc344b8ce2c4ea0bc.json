{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/raghu/Fanance/fanance-dapp/app/frontend/src/hocs/FetchContractData.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport FetchContractData1 from \"./FetchContractData1\";\nexport default function FetchContractData(props) {\n  _s();\n\n  const [buyOrderCount, setBuyOrderCount] = useState(0);\n  const [sellOrderCount, setSellOrderCount] = useState(0); // To provide as dependency for useEffect\n\n  const events = props.drizzleState.contracts[\"CelebrityExchange\"].events;\n  const [completedTrades, setCompletedTrades] = useState([]);\n  const [tokensList, setTokensList] = useState([]);\n  useEffect(() => {\n    const tempBuyOrderCount = props.drizzle.contracts.CelebrityExchange.methods[\"buyOrderCount\"].cacheCall();\n    setBuyOrderCount(tempBuyOrderCount);\n    const tempSellOrderCount = props.drizzle.contracts.CelebrityExchange.methods[\"sellOrderCount\"].cacheCall();\n    setSellOrderCount(tempSellOrderCount); //Fetch tokens from CelebrityToken\n\n    const tempTokensList = props.drizzle.contracts.TokenGenerator.methods[\"getAllCelebrities\"].cacheCall();\n    setTokensList(tempTokensList); // Fetch trades from events\n\n    async function getTrades() {\n      const web3 = props.drizzle.web3;\n      const contract = props.drizzle.contracts[\"CelebrityExchange\"];\n      const yourContractWeb3 = new web3.eth.Contract(contract.abi, contract.address);\n      let completedBuyOrders = [];\n      let completedSellOrders = [];\n      let FilledBuyOrders = await yourContractWeb3.getPastEvents(\"BuyOrderFilled\", {\n        fromBlock: 0,\n        toBlock: \"latest\"\n      });\n      FilledBuyOrders.map(event => {\n        completedBuyOrders.push(event.returnValues);\n      });\n      let FilledSellOrders = await yourContractWeb3.getPastEvents(\"SellOrderFilled\", {\n        fromBlock: 0,\n        toBlock: \"latest\"\n      });\n      console.log(FilledSellOrders);\n      FilledSellOrders.map(event => {\n        completedSellOrders.push(event.returnValues);\n      });\n      setCompletedTrades(completedBuyOrders.concat(completedSellOrders));\n      props.handleCompletedTrades(completedTrades);\n    }\n\n    getTrades(); // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [props.drizzle.contracts.CelebrityExchange], [props.drizzle.contracts.TokenGenerator], events);\n  return /*#__PURE__*/_jsxDEV(FetchContractData1, {\n    drizzle: props.drizzle,\n    drizzleState: props.drizzleState,\n    buyOrderCount: buyOrderCount,\n    handleBuyOrders: props.handleBuyOrders,\n    sellOrderCount: sellOrderCount,\n    handleSellOrders: props.handleSellOrders,\n    handleTokensList: props.handleTokensList,\n    tokensList: tokensList,\n    handleLatestPrice: props.handleLatestPrice\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 75,\n    columnNumber: 3\n  }, this);\n}\n\n_s(FetchContractData, \"APn2YNPFGj2Dtjo1sa6aRAzlky8=\");\n\n_c = FetchContractData;\n\nvar _c;\n\n$RefreshReg$(_c, \"FetchContractData\");","map":{"version":3,"sources":["/Users/raghu/Fanance/fanance-dapp/app/frontend/src/hocs/FetchContractData.js"],"names":["React","useState","useEffect","FetchContractData1","FetchContractData","props","buyOrderCount","setBuyOrderCount","sellOrderCount","setSellOrderCount","events","drizzleState","contracts","completedTrades","setCompletedTrades","tokensList","setTokensList","tempBuyOrderCount","drizzle","CelebrityExchange","methods","cacheCall","tempSellOrderCount","tempTokensList","TokenGenerator","getTrades","web3","contract","yourContractWeb3","eth","Contract","abi","address","completedBuyOrders","completedSellOrders","FilledBuyOrders","getPastEvents","fromBlock","toBlock","map","event","push","returnValues","FilledSellOrders","console","log","concat","handleCompletedTrades","handleBuyOrders","handleSellOrders","handleTokensList","handleLatestPrice"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport FetchContractData1 from \"./FetchContractData1\";\n\nexport default function FetchContractData(props) {\n\tconst [buyOrderCount, setBuyOrderCount] = useState(0);\n\tconst [sellOrderCount, setSellOrderCount] = useState(0);\n\t// To provide as dependency for useEffect\n\tconst events = props.drizzleState.contracts[\"CelebrityExchange\"].events;\n\tconst [completedTrades, setCompletedTrades] = useState([]);\n\tconst [tokensList, setTokensList] = useState([]);\n\tuseEffect(\n\t\t() => {\n\t\t\tconst tempBuyOrderCount = props.drizzle.contracts.CelebrityExchange.methods[\n\t\t\t\t\"buyOrderCount\"\n\t\t\t].cacheCall();\n\t\t\tsetBuyOrderCount(tempBuyOrderCount);\n\t\t\tconst tempSellOrderCount = props.drizzle.contracts.CelebrityExchange.methods[\n\t\t\t\t\"sellOrderCount\"\n\t\t\t].cacheCall();\n\t\t\tsetSellOrderCount(tempSellOrderCount);\n\t\t\t//Fetch tokens from CelebrityToken\n\t\t\tconst tempTokensList = props.drizzle.contracts.TokenGenerator.methods[\n\t\t\t\t\"getAllCelebrities\"\n\t\t\t].cacheCall();\n\t\t\tsetTokensList(tempTokensList);\n\n\t\t\t// Fetch trades from events\n\t\t\tasync function getTrades() {\n\t\t\t\tconst web3 = props.drizzle.web3;\n\t\t\t\tconst contract = props.drizzle.contracts[\"CelebrityExchange\"];\n\t\t\t\tconst yourContractWeb3 = new web3.eth.Contract(\n\t\t\t\t\tcontract.abi,\n\t\t\t\t\tcontract.address\n\t\t\t\t);\n\t\t\t\tlet completedBuyOrders = [];\n\t\t\t\tlet completedSellOrders = [];\n\n\t\t\t\tlet FilledBuyOrders = await yourContractWeb3.getPastEvents(\n\t\t\t\t\t\"BuyOrderFilled\",\n\t\t\t\t\t{\n\t\t\t\t\t\tfromBlock: 0,\n\t\t\t\t\t\ttoBlock: \"latest\",\n\t\t\t\t\t}\n\t\t\t\t);\n\t\t\t\tFilledBuyOrders.map((event) => {\n\t\t\t\t\tcompletedBuyOrders.push(event.returnValues);\n\t\t\t\t});\n\n\t\t\t\tlet FilledSellOrders = await yourContractWeb3.getPastEvents(\n\t\t\t\t\t\"SellOrderFilled\",\n\t\t\t\t\t{\n\t\t\t\t\t\tfromBlock: 0,\n\t\t\t\t\t\ttoBlock: \"latest\",\n\t\t\t\t\t}\n\t\t\t\t);\n\t\t\t\tconsole.log(FilledSellOrders);\n\t\t\t\tFilledSellOrders.map((event) => {\n\t\t\t\t\tcompletedSellOrders.push(event.returnValues);\n\t\t\t\t});\n\n\t\t\t\tsetCompletedTrades(completedBuyOrders.concat(completedSellOrders));\n\t\t\t\tprops.handleCompletedTrades(completedTrades);\n\t\t\t}\n\n\t\t\tgetTrades();\n\n\t\t\t// eslint-disable-next-line react-hooks/exhaustive-deps\n\t\t},\n\t\t[props.drizzle.contracts.CelebrityExchange],\n\t\t[props.drizzle.contracts.TokenGenerator],\n\t\tevents\n\t);\n\n\treturn (\n\t\t<FetchContractData1\n\t\t\tdrizzle={props.drizzle}\n\t\t\tdrizzleState={props.drizzleState}\n\t\t\tbuyOrderCount={buyOrderCount}\n\t\t\thandleBuyOrders={props.handleBuyOrders}\n\t\t\tsellOrderCount={sellOrderCount}\n\t\t\thandleSellOrders={props.handleSellOrders}\n\t\t\thandleTokensList={props.handleTokensList}\n\t\t\ttokensList={tokensList}\n\t\t\thandleLatestPrice={props.handleLatestPrice}\n\t\t/>\n\t);\n}\n"]},"metadata":{},"sourceType":"module"}