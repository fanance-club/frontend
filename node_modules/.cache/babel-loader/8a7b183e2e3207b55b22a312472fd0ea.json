{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/raghu/Fanance/fanance-dapp/app/frontend/src/setString.js\";\nimport React from \"react\";\n\nclass SetString extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      stackId: null\n    };\n\n    this.handleKeyDown = e => {\n      // if the enter key is pressed, set the value with the string\n      if (e.keyCode === 13) {\n        this.setValue(e.target.value);\n      }\n    };\n\n    this.setValue = value => {\n      const {\n        drizzle,\n        drizzleState\n      } = this.props;\n      const contract = drizzle.contracts.TokenGenerator; // let drizzle know we want to call the `set` method with `value`\n\n      const stackId = contract.methods[\"setCounter\"].cacheSend(value, {\n        from: drizzleState.accounts[0]\n      }); // save the `stackId` for later reference\n\n      this.setState({\n        stackId\n      });\n    };\n\n    this.getTxStatus = () => {\n      // get the transaction states from the drizzle state\n      const {\n        transactions,\n        transactionStack\n      } = this.props.drizzleState; // get the transaction hash using our saved `stackId`\n\n      const txHash = transactionStack[this.state.stackId]; // if transaction hash does not exist, don't display anything\n\n      if (!txHash) return null; // otherwise, return the transaction status\n\n      return `Transaction status: ${transactions[txHash] && transactions[txHash].status}`;\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"number\",\n        onKeyDown: this.handleKeyDown\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: this.getTxStatus()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 5\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 4\n    }, this);\n  }\n\n}\n\nexport default SetString;","map":{"version":3,"sources":["/Users/raghu/Fanance/fanance-dapp/app/frontend/src/setString.js"],"names":["React","SetString","Component","state","stackId","handleKeyDown","e","keyCode","setValue","target","value","drizzle","drizzleState","props","contract","contracts","TokenGenerator","methods","cacheSend","from","accounts","setState","getTxStatus","transactions","transactionStack","txHash","status","render"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;;AAEA,MAAMC,SAAN,SAAwBD,KAAK,CAACE,SAA9B,CAAwC;AAAA;AAAA;AAAA,SACvCC,KADuC,GAC/B;AAAEC,MAAAA,OAAO,EAAE;AAAX,KAD+B;;AAAA,SAGvCC,aAHuC,GAGtBC,CAAD,IAAO;AACtB;AACA,UAAIA,CAAC,CAACC,OAAF,KAAc,EAAlB,EAAsB;AACrB,aAAKC,QAAL,CAAcF,CAAC,CAACG,MAAF,CAASC,KAAvB;AACA;AACD,KARsC;;AAAA,SAUvCF,QAVuC,GAU3BE,KAAD,IAAW;AACrB,YAAM;AAAEC,QAAAA,OAAF;AAAWC,QAAAA;AAAX,UAA4B,KAAKC,KAAvC;AACA,YAAMC,QAAQ,GAAGH,OAAO,CAACI,SAAR,CAAkBC,cAAnC,CAFqB,CAIrB;;AACA,YAAMZ,OAAO,GAAGU,QAAQ,CAACG,OAAT,CAAiB,YAAjB,EAA+BC,SAA/B,CAAyCR,KAAzC,EAAgD;AAC/DS,QAAAA,IAAI,EAAEP,YAAY,CAACQ,QAAb,CAAsB,CAAtB;AADyD,OAAhD,CAAhB,CALqB,CASrB;;AACA,WAAKC,QAAL,CAAc;AAAEjB,QAAAA;AAAF,OAAd;AACA,KArBsC;;AAAA,SAuBvCkB,WAvBuC,GAuBzB,MAAM;AACnB;AACA,YAAM;AAAEC,QAAAA,YAAF;AAAgBC,QAAAA;AAAhB,UAAqC,KAAKX,KAAL,CAAWD,YAAtD,CAFmB,CAInB;;AACA,YAAMa,MAAM,GAAGD,gBAAgB,CAAC,KAAKrB,KAAL,CAAWC,OAAZ,CAA/B,CALmB,CAOnB;;AACA,UAAI,CAACqB,MAAL,EAAa,OAAO,IAAP,CARM,CAUnB;;AACA,aAAQ,uBACPF,YAAY,CAACE,MAAD,CAAZ,IAAwBF,YAAY,CAACE,MAAD,CAAZ,CAAqBC,MAC7C,EAFD;AAGA,KArCsC;AAAA;;AAuCvCC,EAAAA,MAAM,GAAG;AACR,wBACC;AAAA,8BACC;AAAO,QAAA,IAAI,EAAC,QAAZ;AAAqB,QAAA,SAAS,EAAE,KAAKtB;AAArC;AAAA;AAAA;AAAA;AAAA,cADD,eAEC;AAAA,kBAAM,KAAKiB,WAAL;AAAN;AAAA;AAAA;AAAA;AAAA,cAFD;AAAA;AAAA;AAAA;AAAA;AAAA,YADD;AAMA;;AA9CsC;;AAiDxC,eAAerB,SAAf","sourcesContent":["import React from \"react\";\n\nclass SetString extends React.Component {\n\tstate = { stackId: null };\n\n\thandleKeyDown = (e) => {\n\t\t// if the enter key is pressed, set the value with the string\n\t\tif (e.keyCode === 13) {\n\t\t\tthis.setValue(e.target.value);\n\t\t}\n\t};\n\n\tsetValue = (value) => {\n\t\tconst { drizzle, drizzleState } = this.props;\n\t\tconst contract = drizzle.contracts.TokenGenerator;\n\n\t\t// let drizzle know we want to call the `set` method with `value`\n\t\tconst stackId = contract.methods[\"setCounter\"].cacheSend(value, {\n\t\t\tfrom: drizzleState.accounts[0],\n\t\t});\n\n\t\t// save the `stackId` for later reference\n\t\tthis.setState({ stackId });\n\t};\n\n\tgetTxStatus = () => {\n\t\t// get the transaction states from the drizzle state\n\t\tconst { transactions, transactionStack } = this.props.drizzleState;\n\n\t\t// get the transaction hash using our saved `stackId`\n\t\tconst txHash = transactionStack[this.state.stackId];\n\n\t\t// if transaction hash does not exist, don't display anything\n\t\tif (!txHash) return null;\n\n\t\t// otherwise, return the transaction status\n\t\treturn `Transaction status: ${\n\t\t\ttransactions[txHash] && transactions[txHash].status\n\t\t}`;\n\t};\n\n\trender() {\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t<input type=\"number\" onKeyDown={this.handleKeyDown} />\n\t\t\t\t<div>{this.getTxStatus()}</div>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default SetString;\n"]},"metadata":{},"sourceType":"module"}