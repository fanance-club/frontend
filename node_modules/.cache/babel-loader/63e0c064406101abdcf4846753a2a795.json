{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/raghu/Fanance/fanance-dapp/app/frontend/src/hocs/FetchContractData2.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nexport default function FetchContractData2(props) {\n  _s();\n\n  const [buyOrderDetailsArray, setBuyOrderDetailsArray] = useState([]);\n  const [sellOrderDetailsArray, setSellOrderDetailsArray] = useState([]);\n  useEffect(() => {\n    let buyOrdersArray = [];\n\n    for (let i = 0; i < props.buyCount; i++) {\n      let tempBuyOrderDetails = props.drizzleState.contracts.CelebrityExchange.buyOrders[props.buyOrders[i]];\n      tempBuyOrderDetails = tempBuyOrderDetails && tempBuyOrderDetails.value;\n      buyOrdersArray.push(tempBuyOrderDetails);\n    }\n\n    setBuyOrderDetailsArray(buyOrdersArray);\n    let sellOrdersArray = [];\n\n    for (let i = 0; i < props.sellCount; i++) {\n      let tempSellOrderDetails = props.drizzleState.contracts.CelebrityExchange.sellOrders[props.sellOrders[i]];\n      tempSellOrderDetails = tempSellOrderDetails && tempSellOrderDetails.value;\n      sellOrdersArray.push(tempSellOrderDetails);\n    }\n\n    setSellOrderDetailsArray(sellOrdersArray);\n    props.handleSellOrders(sellOrdersArray);\n    props.handleBuyOrders(buyOrdersArray);\n    handleInitialSellOrderOnBuyOrderChange(buyOrdersArray);\n    handleInitialSellOrderOnSellOrderChange(sellOrdersArray);\n    let tempLatestPrice;\n\n    for (let i = 0; i < props.tokensList.length; i++) {\n      tempLatestPrice = props.drizzleState.contracts.CelebrityExchange.latestPrice[props.latestPrice[i]];\n      tempLatestPrice = tempLatestPrice && tempLatestPrice.value;\n      props.tokensList[i].previousPrice = typeof props.tokensList[i].latestPrice != \"undefined\" ? props.tokensList[i].latestPrice : 0;\n      props.tokensList[i].latestPrice = tempLatestPrice;\n    } // eslint-disable-next-line react-hooks/exhaustive-deps\n\n  }, [props.drizzleState.contracts.CelebrityExchange.buyOrders, props.drizzleState.contracts.CelebrityExchange.sellOrders, props.sellOrders, props.sellCount, props.buyOrders, props.buyCount, props.tokensList]);\n\n  const handleInitialSellOrderOnBuyOrderChange = async buyOrders => {\n    const web3 = props.drizzle.web3;\n    const contract = props.drizzle.contracts[\"CelebrityExchange\"];\n    const exchangeContract = new web3.eth.Contract(contract.abi, contract.address);\n    let tokenList = typeof props.tokensList != \"undefined\" ? props.tokensList : [];\n\n    for (let i = 0; i < tokenList.length; i++) {\n      buyOrders.filter(order => order.celebrityToken == typeof tokenList[i] != \"undefined\" ? tokenList[i].address : null).sort((a, b) => b.price - a.price);\n      let initialSellOrder = await exchangeContract.methods.latestPrice(typeof tokenList[i] != \"undefined\" ? tokenList[i].address : null).call();\n      console.log(buyOrders, initialSellOrder);\n    }\n  };\n\n  const handleInitialSellOrderOnSellOrderChange = sellOrders => {\n    sellOrders.sort((a, b) => b.price - a.price);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"span\", {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 85,\n    columnNumber: 9\n  }, this);\n}\n\n_s(FetchContractData2, \"jvdoTXtu/dhS84phwldA0Gl3f5o=\");\n\n_c = FetchContractData2;\n\nvar _c;\n\n$RefreshReg$(_c, \"FetchContractData2\");","map":{"version":3,"sources":["/Users/raghu/Fanance/fanance-dapp/app/frontend/src/hocs/FetchContractData2.js"],"names":["React","useState","useEffect","FetchContractData2","props","buyOrderDetailsArray","setBuyOrderDetailsArray","sellOrderDetailsArray","setSellOrderDetailsArray","buyOrdersArray","i","buyCount","tempBuyOrderDetails","drizzleState","contracts","CelebrityExchange","buyOrders","value","push","sellOrdersArray","sellCount","tempSellOrderDetails","sellOrders","handleSellOrders","handleBuyOrders","handleInitialSellOrderOnBuyOrderChange","handleInitialSellOrderOnSellOrderChange","tempLatestPrice","tokensList","length","latestPrice","previousPrice","web3","drizzle","contract","exchangeContract","eth","Contract","abi","address","tokenList","filter","order","celebrityToken","sort","a","b","price","initialSellOrder","methods","call","console","log"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\n\nexport default function FetchContractData2(props) {\n\tconst [buyOrderDetailsArray, setBuyOrderDetailsArray] = useState([]);\n\tconst [sellOrderDetailsArray, setSellOrderDetailsArray] = useState([]);\n\tuseEffect(() => {\n\t\tlet buyOrdersArray = [];\n\t\tfor (let i = 0; i < props.buyCount; i++) {\n\t\t\tlet tempBuyOrderDetails =\n\t\t\t\tprops.drizzleState.contracts.CelebrityExchange.buyOrders[\n\t\t\t\t\tprops.buyOrders[i]\n\t\t\t\t];\n\t\t\ttempBuyOrderDetails = tempBuyOrderDetails && tempBuyOrderDetails.value;\n\t\t\tbuyOrdersArray.push(tempBuyOrderDetails);\n\t\t}\n\t\tsetBuyOrderDetailsArray(buyOrdersArray);\n\n\t\tlet sellOrdersArray = [];\n\t\tfor (let i = 0; i < props.sellCount; i++) {\n\t\t\tlet tempSellOrderDetails =\n\t\t\t\tprops.drizzleState.contracts.CelebrityExchange.sellOrders[\n\t\t\t\t\tprops.sellOrders[i]\n\t\t\t\t];\n\t\t\ttempSellOrderDetails = tempSellOrderDetails && tempSellOrderDetails.value;\n\t\t\tsellOrdersArray.push(tempSellOrderDetails);\n\t\t}\n\t\tsetSellOrderDetailsArray(sellOrdersArray);\n\t\tprops.handleSellOrders(sellOrdersArray);\n\t\tprops.handleBuyOrders(buyOrdersArray);\n\t\thandleInitialSellOrderOnBuyOrderChange(buyOrdersArray);\n\t\thandleInitialSellOrderOnSellOrderChange(sellOrdersArray);\n\t\tlet tempLatestPrice;\n\t\tfor (let i = 0; i < props.tokensList.length; i++) {\n\t\t\ttempLatestPrice =\n\t\t\t\tprops.drizzleState.contracts.CelebrityExchange.latestPrice[\n\t\t\t\t\tprops.latestPrice[i]\n\t\t\t\t];\n\t\t\ttempLatestPrice = tempLatestPrice && tempLatestPrice.value;\n\t\t\tprops.tokensList[i].previousPrice =\n\t\t\t\ttypeof props.tokensList[i].latestPrice != \"undefined\"\n\t\t\t\t\t? props.tokensList[i].latestPrice\n\t\t\t\t\t: 0;\n\t\t\tprops.tokensList[i].latestPrice = tempLatestPrice;\n\t\t}\n\t\t// eslint-disable-next-line react-hooks/exhaustive-deps\n\t}, [\n\t\tprops.drizzleState.contracts.CelebrityExchange.buyOrders,\n\t\tprops.drizzleState.contracts.CelebrityExchange.sellOrders,\n\t\tprops.sellOrders,\n\t\tprops.sellCount,\n\t\tprops.buyOrders,\n\t\tprops.buyCount,\n\t\tprops.tokensList,\n\t]);\n\tconst handleInitialSellOrderOnBuyOrderChange = async (buyOrders) => {\n\t\tconst web3 = props.drizzle.web3;\n\t\tconst contract = props.drizzle.contracts[\"CelebrityExchange\"];\n\t\tconst exchangeContract = new web3.eth.Contract(\n\t\t\tcontract.abi,\n\t\t\tcontract.address\n\t\t);\n\t\tlet tokenList =\n\t\t\ttypeof props.tokensList != \"undefined\" ? props.tokensList : [];\n\t\tfor (let i = 0; i < tokenList.length; i++) {\n\t\t\tbuyOrders\n\t\t\t\t.filter((order) =>\n\t\t\t\t\t(order.celebrityToken == typeof tokenList[i]) != \"undefined\"\n\t\t\t\t\t\t? tokenList[i].address\n\t\t\t\t\t\t: null\n\t\t\t\t)\n\t\t\t\t.sort((a, b) => b.price - a.price);\n\n\t\t\tlet initialSellOrder = await exchangeContract.methods\n\t\t\t\t.latestPrice(\n\t\t\t\t\ttypeof tokenList[i] != \"undefined\" ? tokenList[i].address : null\n\t\t\t\t)\n\t\t\t\t.call();\n\t\t\tconsole.log(buyOrders, initialSellOrder);\n\t\t}\n\t};\n\tconst handleInitialSellOrderOnSellOrderChange = (sellOrders) => {\n\t\tsellOrders.sort((a, b) => b.price - a.price);\n\t};\n\n\treturn <span></span>;\n}\n"]},"metadata":{},"sourceType":"module"}