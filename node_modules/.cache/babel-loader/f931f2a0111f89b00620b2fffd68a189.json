{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/raghu/Fanance/fanance-dapp/app/frontend/src/containers/CelebrityExchange/PriceChart.js\";\nimport React from \"react\";\nimport { Card } from \"antd\";\nimport Chart from \"react-apexcharts\";\nimport Spinner from \"./Spinner\";\nimport { chartOptions, dummyData } from \"./PriceChart.config\";\nimport { get, groupBy, maxBy, minBy } from \"lodash\";\nimport moment from \"moment\";\n\nconst buildGraphData = orders => {\n  // Group the orders by hour for the graph\n  orders = groupBy(orders, o => moment.unix(o.timestamp).startOf(\"hour\").format()); // Get each hour where data exists\n\n  const hours = Object.keys(orders); // Build the graph series\n\n  const graphData = hours.map(hour => {\n    // Fetch all the orders from current hour\n    const group = orders[hour]; // Calculate price values - open, high, low, close\n\n    const open = group[0]; // first order\n\n    const high = maxBy(group, \"price\"); // high price\n\n    const low = minBy(group, \"price\"); // low price\n\n    const close = group[group.length - 1]; // last order\n\n    return {\n      x: new Date(hour),\n      y: [open.tokenPrice, high.tokenPrice, low.tokenPrice, close.tokenPrice]\n    };\n  });\n  return graphData;\n};\n\nconst decorateOrder = order => {\n  // Calculate token price to 5 decimal places\n  const precision = 100000;\n  let tokenPrice = order.price / order.numberOfTokens;\n  tokenPrice = Math.round(tokenPrice * precision) / precision;\n  return { ...order,\n    etherAmount: order.price / 10 ** 18,\n    tokenAmount: order.numberOfTokens / 10 ** 18,\n    tokenPrice,\n    formattedTimestamp: moment.unix(order.timestamp).format(\"h:mm:ss a M/D\")\n  };\n};\n\nconst priceChart = (orders, token) => {\n  // Sort orders by date ascending to compare history\n  orders = orders.filter(order => order.celebrityToken == (typeof token[0] != \"undefined\" ? token[0].address : null)).sort((a, b) => a.timestamp - b.timestamp); // Decorate orders - add display attributes\n\n  orders = orders.map(o => decorateOrder(o)); // Get last 2 order for final price & price change\n\n  let secondLastOrder, lastOrder;\n  [secondLastOrder, lastOrder] = orders.slice(orders.length - 2, orders.length); // get last order price\n\n  const lastPrice = get(lastOrder, \"price\", 0); // get second last order price\n\n  const secondLastPrice = get(secondLastOrder, \"price\", 0);\n  return {\n    lastPrice,\n    lastPriceChange: lastPrice >= secondLastPrice ? \"+\" : \"-\",\n    series: [{\n      data: buildGraphData(orders)\n    }]\n  };\n};\n\nconst priceSymbol = (lastPriceChange, lastPrice) => {\n  let output;\n\n  if (lastPriceChange === \"+\") {\n    output = /*#__PURE__*/_jsxDEV(\"span\", {\n      style: {\n        color: \"#55bd6c\"\n      },\n      children: [\"\\u25B2 \\xA0 \", lastPrice / 10 ** 18]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 4\n    }, this); // Green up tiangle\n  } else {\n    output = /*#__PURE__*/_jsxDEV(\"span\", {\n      style: {\n        color: \"#f1432f\"\n      },\n      children: [\"\\u25BC \\xA0 \", lastPrice / 10 ** 18]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 4\n    }, this); // Red down triangle\n  }\n\n  return output;\n};\n\nconst showPriceChart = (priceChart, symbol) => {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"priceChart\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"price\",\n      style: {\n        color: \"white\"\n      },\n      children: /*#__PURE__*/_jsxDEV(\"h4\", {\n        style: {\n          color: \"white\",\n          textAlign: \"center\"\n        },\n        children: [symbol, \" / ETH \\xA0\", \" \", priceSymbol(priceChart.lastPriceChange, priceChart.lastPrice)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 5\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(Chart, {\n      options: chartOptions,\n      series: dummyData,\n      type: \"candlestick\",\n      width: \"100%\",\n      height: \"80%\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 4\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 100,\n    columnNumber: 3\n  }, this);\n};\n\nconst PriceChart = props => {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(Card, {\n      className: \"priceChart\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"card bg-dark\",\n        style: {\n          color: \"white\"\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"card-header\",\n          children: \"Price Chart\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 123,\n          columnNumber: 6\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"card-body\",\n          children: showPriceChart(priceChart(props.completedTrades, props.token), props.symbol)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 124,\n          columnNumber: 6\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 5\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 4\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 120,\n    columnNumber: 3\n  }, this);\n};\n\n_c = PriceChart;\nexport default PriceChart;\n\nvar _c;\n\n$RefreshReg$(_c, \"PriceChart\");","map":{"version":3,"sources":["/Users/raghu/Fanance/fanance-dapp/app/frontend/src/containers/CelebrityExchange/PriceChart.js"],"names":["React","Card","Chart","Spinner","chartOptions","dummyData","get","groupBy","maxBy","minBy","moment","buildGraphData","orders","o","unix","timestamp","startOf","format","hours","Object","keys","graphData","map","hour","group","open","high","low","close","length","x","Date","y","tokenPrice","decorateOrder","order","precision","price","numberOfTokens","Math","round","etherAmount","tokenAmount","formattedTimestamp","priceChart","token","filter","celebrityToken","address","sort","a","b","secondLastOrder","lastOrder","slice","lastPrice","secondLastPrice","lastPriceChange","series","data","priceSymbol","output","color","showPriceChart","symbol","textAlign","PriceChart","props","completedTrades"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport { Card } from \"antd\";\nimport Chart from \"react-apexcharts\";\nimport Spinner from \"./Spinner\";\nimport { chartOptions, dummyData } from \"./PriceChart.config\";\nimport { get, groupBy, maxBy, minBy } from \"lodash\";\nimport moment from \"moment\";\n\nconst buildGraphData = (orders) => {\n\t// Group the orders by hour for the graph\n\torders = groupBy(orders, (o) =>\n\t\tmoment.unix(o.timestamp).startOf(\"hour\").format()\n\t);\n\t// Get each hour where data exists\n\tconst hours = Object.keys(orders);\n\t// Build the graph series\n\tconst graphData = hours.map((hour) => {\n\t\t// Fetch all the orders from current hour\n\t\tconst group = orders[hour];\n\t\t// Calculate price values - open, high, low, close\n\t\tconst open = group[0]; // first order\n\t\tconst high = maxBy(group, \"price\"); // high price\n\t\tconst low = minBy(group, \"price\"); // low price\n\t\tconst close = group[group.length - 1]; // last order\n\n\t\treturn {\n\t\t\tx: new Date(hour),\n\t\t\ty: [open.tokenPrice, high.tokenPrice, low.tokenPrice, close.tokenPrice],\n\t\t};\n\t});\n\n\treturn graphData;\n};\n\nconst decorateOrder = (order) => {\n\t// Calculate token price to 5 decimal places\n\tconst precision = 100000;\n\tlet tokenPrice = order.price / order.numberOfTokens;\n\ttokenPrice = Math.round(tokenPrice * precision) / precision;\n\n\treturn {\n\t\t...order,\n\t\tetherAmount: order.price / 10 ** 18,\n\t\ttokenAmount: order.numberOfTokens / 10 ** 18,\n\t\ttokenPrice,\n\t\tformattedTimestamp: moment.unix(order.timestamp).format(\"h:mm:ss a M/D\"),\n\t};\n};\n\nconst priceChart = (orders, token) => {\n\t// Sort orders by date ascending to compare history\n\torders = orders\n\t\t.filter(\n\t\t\t(order) =>\n\t\t\t\torder.celebrityToken ==\n\t\t\t\t(typeof token[0] != \"undefined\" ? token[0].address : null)\n\t\t)\n\t\t.sort((a, b) => a.timestamp - b.timestamp);\n\t// Decorate orders - add display attributes\n\torders = orders.map((o) => decorateOrder(o));\n\t// Get last 2 order for final price & price change\n\tlet secondLastOrder, lastOrder;\n\t[secondLastOrder, lastOrder] = orders.slice(orders.length - 2, orders.length);\n\t// get last order price\n\tconst lastPrice = get(lastOrder, \"price\", 0);\n\t// get second last order price\n\tconst secondLastPrice = get(secondLastOrder, \"price\", 0);\n\n\treturn {\n\t\tlastPrice,\n\t\tlastPriceChange: lastPrice >= secondLastPrice ? \"+\" : \"-\",\n\t\tseries: [\n\t\t\t{\n\t\t\t\tdata: buildGraphData(orders),\n\t\t\t},\n\t\t],\n\t};\n};\n\nconst priceSymbol = (lastPriceChange, lastPrice) => {\n\tlet output;\n\tif (lastPriceChange === \"+\") {\n\t\toutput = (\n\t\t\t<span style={{ color: \"#55bd6c\" }}>\n\t\t\t\t&#9650; &nbsp; {lastPrice / 10 ** 18}\n\t\t\t</span>\n\t\t); // Green up tiangle\n\t} else {\n\t\toutput = (\n\t\t\t<span style={{ color: \"#f1432f\" }}>\n\t\t\t\t&#9660; &nbsp; {lastPrice / 10 ** 18}\n\t\t\t</span>\n\t\t); // Red down triangle\n\t}\n\treturn output;\n};\n\nconst showPriceChart = (priceChart, symbol) => {\n\treturn (\n\t\t<div className=\"priceChart\">\n\t\t\t<div className=\"price\" style={{ color: \"white\" }}>\n\t\t\t\t<h4 style={{ color: \"white\", textAlign: \"center\" }}>\n\t\t\t\t\t{symbol} / ETH &nbsp;{\" \"}\n\t\t\t\t\t{priceSymbol(priceChart.lastPriceChange, priceChart.lastPrice)}\n\t\t\t\t</h4>\n\t\t\t</div>\n\t\t\t<Chart\n\t\t\t\toptions={chartOptions}\n\t\t\t\tseries={dummyData}\n\t\t\t\ttype=\"candlestick\"\n\t\t\t\twidth=\"100%\"\n\t\t\t\theight=\"80%\"\n\t\t\t/>\n\t\t</div>\n\t);\n};\n\nconst PriceChart = (props) => {\n\treturn (\n\t\t<div>\n\t\t\t<Card className=\"priceChart\">\n\t\t\t\t<div className=\"card bg-dark\" style={{ color: \"white\" }}>\n\t\t\t\t\t<div className=\"card-header\">Price Chart</div>\n\t\t\t\t\t<div className=\"card-body\">\n\t\t\t\t\t\t{showPriceChart(\n\t\t\t\t\t\t\tpriceChart(props.completedTrades, props.token),\n\t\t\t\t\t\t\tprops.symbol\n\t\t\t\t\t\t)}\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</Card>\n\t\t</div>\n\t);\n};\n\nexport default PriceChart;\n"]},"metadata":{},"sourceType":"module"}